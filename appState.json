{"EDITOR_STATE":{"allProjectFiles":{"aaba232e-5da4-480e-ba98-8bcadaf69f84":{"id":"aaba232e-5da4-480e-ba98-8bcadaf69f84","parent":null,"name":"Project_Anomoly_Detection","type":"DIRECTORY","isDirectory":true,"children":["10387f6e-e92a-4ff3-bacc-d27581c38da4"],"isRemovable":false,"filePath":"Project_Anomoly_Detection"},"10387f6e-e92a-4ff3-bacc-d27581c38da4":{"id":"10387f6e-e92a-4ff3-bacc-d27581c38da4","parent":"aaba232e-5da4-480e-ba98-8bcadaf69f84","name":"lambda.js","type":"LAMBDA_FILE","isDirectory":false,"children":[],"isRemovable":true,"filePath":"Project_Anomoly_Detection/lambda.js","code":"let AWS = require('aws-sdk');\nlet sqs = new AWS.SQS();\nlet date = require('date-and-time');\nconst ddb = new AWS.DynamoDB.DocumentClient();\nconst sns = new AWS.SNS();\nexports.handler = function (event, context, callback) {\n\n\tsqs.receiveMessage({\n\t\tQueueUrl: 'https://sqs.us-east-1.amazonaws.com/318300609668/anomalyDetectionQueue',  // URL of your queue\n\t\tAttributeNames: ['All'],\n\t\tMaxNumberOfMessages: '10',\n\t\tVisibilityTimeout: '30',\n\t\tWaitTimeSeconds: '20'\n\t}).promise()\n\t\t.then(data => {\n\t\t\tdata.Messages.forEach(message => {      // Going through all the fetched messages in this attempt\n\t\t\t\tconsole.log(\"Received message with payload\", message.Body);\n\n\t\t\t\tlet messageBody = JSON.parse(message.Body);\n\n\t\t\t\tlet bookingDateObj = new Date();\n\t\t\t\tlet startingDateObj = date.parse(messageBody.bookingRequest.startDate, 'YYYY-MM-DD');\n\t\t\t\tlet endingDateObj = date.parse(messageBody.bookingRequest.endDate, 'YYYY-MM-DD');\n\n\t\t\t\tlet failure = messageBody.bookingReqProcessingState === \"Failed\";       // Check whether it's a booking failure\n\t\t\t\tif (failure) {\n\t\t\t\t\tlet notificationMsg = \"Notifying about booking failure for booking reference :\" + messageBody.bookingRef;\n\n\t\t\t\t\tsns.publish({\n\t\t\t\t\t\tMessage: notificationMsg,\n\t\t\t\t\t\tMessageAttributes: {\n\t\t\t\t\t\t\t'AWS.SNS.SMS.SMSType': {\n\t\t\t\t\t\t\t\tDataType: 'String',\n\t\t\t\t\t\t\t\tStringValue: 'Promotional'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'AWS.SNS.SMS.SenderID': {\n\t\t\t\t\t\t\t\tDataType: 'String',\n\t\t\t\t\t\t\t\tStringValue: 'BkFailures'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tPhoneNumber: '+94770630943'\n\t\t\t\t\t}).promise()\n\t\t\t\t\t\t.then(data => {\n\t\t\t\t\t\t\tconsole.log(\"Successfully sent notification to the operator with response :\" + JSON.stringify(data));\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\tconsole.log(\"Error while sending notification SMS\", err);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tlet gapForBookingStartDate = date.subtract(startingDateObj, bookingDateObj).toDays();\n\t\t\t\tlet gapBetweenBookingDates = date.subtract(endingDateObj, startingDateObj).toDays();\n\n\t\t\t\t// Check whether is it a booking anomaly. In this example it's detected as an anomaly if booking start date is\n\t\t\t\t// 6 months (180 days) away from the current date or booking date range is greater than 20 days\n\t\t\t\tif (gapBetweenBookingDates > 20 || gapForBookingStartDate > 180) {\n\t\t\t\t\tlet insertTimeStr = date.format(new Date(), 'YYYY-MM-DD HH:mm:ss');\n\t\t\t\t\tddb.put({\n\t\t\t\t\t\tTableName: 'BookingInfoAnomalies',\n\t\t\t\t\t\tItem: {\n\t\t\t\t\t\t\t'ResellerID': messageBody.resellerId,\n\t\t\t\t\t\t\t'BookingRef': messageBody.bookingRef,\n\t\t\t\t\t\t\t'BookingState': !failure,\n\t\t\t\t\t\t\t'StartDate': messageBody.bookingRequest.startDate,\n\t\t\t\t\t\t\t'EndDate': messageBody.bookingRequest.endDate,\n\t\t\t\t\t\t\t'Pax': messageBody.bookingRequest.pax,\n\t\t\t\t\t\t\t'City': messageBody.bookingRequest.city,\n\t\t\t\t\t\t\t'Grade': messageBody.bookingRequest.grade,\n\t\t\t\t\t\t\t'InsertTime': insertTimeStr\n\t\t\t\t\t\t}\n\t\t\t\t\t}).promise()\n\t\t\t\t\t\t.then(data => {\n\t\t\t\t\t\t\tconsole.log(\"Successfully inserted booking ref : \" + messageBody.bookingRef +\n\t\t\t\t\t\t\t\t\" to DynamoDB with response : \" + JSON.stringify(data));\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\tconsole.log(\"Error while inserting data to DynamoDB due to : \", err);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tsqs.deleteMessage({                         // Deleting process message to make sure it's not processed again\n\t\t\t\t\tQueueUrl: 'https://sqs.us-east-1.amazonaws.com/318300609668/anomalyDetectionQueue',  // URL of your queue\n\t\t\t\t\tReceiptHandle: message.ReceiptHandle\n\n\t\t\t\t}).promise()\n\t\t\t\t\t.then(data => {\n\t\t\t\t\t\tconsole.log(\"Successfully deleted message with ReceiptHandle : \" + message.ReceiptHandle +\n\t\t\t\t\t\t\t\"and booking reference : \" + messageBody.bookingRef + \" with response :\" + JSON.stringify(data));\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\tconsole.log(\"Error while deleting the fetched message with ReceiptHandle : \" + message.ReceiptHandle +\n\t\t\t\t\t\t\t\"and booking reference : \" + messageBody.bookingRef, err);\n\t\t\t\t\t});\n\n\t\t\t});\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.log(\"Error while fetching messages from the sqs queue\", err);\n\t\t});\n\n\n\tcallback(null, 'Successfully executed');\n}","triggers":[{"resourceName":"apigusEast1AnomolyDetectiontestany","config":{}}],"config":{"memory":128,"timeout":60,"runtime":"nodejs8.10"},"version":58,"syncVersion":26,"customSecurityPolicy":{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Resource":"arn:aws:sqs:us-east-1:318300609668:anomalyDetectionQueue","Action":["*"]},{"Effect":"Allow","Resource":"arn:aws:sns:us-east-1:3183-0060-9668:","Action":["*"]},{"Effect":"Allow","Resource":"arn:aws:dynamodb:us-east-1:3183-0060-9668:table/UnusualBookingRequests","Action":["*"]}]},"references":[]}},"rootNode":"aaba232e-5da4-480e-ba98-8bcadaf69f84","openFiles":["10387f6e-e92a-4ff3-bacc-d27581c38da4"],"currentFileId":"10387f6e-e92a-4ff3-bacc-d27581c38da4","resources":{"apigusEast1AnomolyDetectiontestany":{"name":"apigusEast1AnomolyDetectiontestany","type":"API_GATEWAY","config":{"selectedRegion":"us-east-1","apiMode":0,"apiName":"Anomoly_Detection","endpointType":"EDGE","resourceMode":0,"resourceName":"test","resourcePath":"/test","restMethod":"ANY","proxyIntegration":false,"enableCORS":false,"stageMode":0,"stageName":"Prod"},"globallyEditable":true},"sqsusEast1test":{"name":"sqsusEast1test","type":"SQS","config":{"mode":0,"existing":false,"name":"test","url":"https://sqs.us-east-1.amazonaws.com/318300609668/test","selectedRegion":"us-east-1","deliveryDelay":0,"deliveryDelayUnit":"seconds","useRedrivePolicy":false,"useSSE":false,"kmsCustomerMasterKey":"default","accountId":"318300609668","dataKeyReusePeriod":5,"queueType":"standardQueue","defaultVisibilityTimeout":30,"defaultVisibilityTimeoutUnit":"seconds","messageRetentionPeriod":4,"messageRetentionPeriodUnit":"days","maximumMessageSize":256,"receiveMessageWaitTime":0,"deadLetterQueueName":"","contentBasedDeduplication":false,"operation":0},"globallyEditable":true},"snsDirectSMSResource":{"name":"snsDirectSMSResource","type":"SNS","config":{"snsType":1,"numbers":["+94770630943"]},"globallyEditable":false}},"envVariables":[{"lambdaId":"all","varKey":"SIGMA_AWS_ACC_ID","varValue":null,"shouldPersist":false,"editable":false}],"packageJSON":{"dependencies":{"aws-sdk":{"name":"aws-sdk","version":"2.176.0","notRemovable":true},"slappforge-sdk-aws":{"name":"slappforge-sdk-aws","version":"0.0.5","notRemovable":false}}},"lambdaId":"10387f6e-e92a-4ff3-bacc-d27581c38da4","additionalFiles":[]},"PROJECT_META":{"projectName":"Project_Anomoly_Detection","projectDescription":"","projectVersion":"1.0.0","projectRegion":"us-east-1","repoName":"Project_Anomoly_Detection","repoUrl":"https://github.com/TestAndunR/Project_Anomoly_Detection","lastSave":1528262753853}}