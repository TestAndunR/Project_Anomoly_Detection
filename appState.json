{"EDITOR_STATE":{"allProjectFiles":{"aaba232e-5da4-480e-ba98-8bcadaf69f84":{"id":"aaba232e-5da4-480e-ba98-8bcadaf69f84","parent":null,"name":"Project_Anomoly_Detection","type":"DIRECTORY","isDirectory":true,"children":["10387f6e-e92a-4ff3-bacc-d27581c38da4"],"isRemovable":false,"filePath":"Project_Anomoly_Detection"},"10387f6e-e92a-4ff3-bacc-d27581c38da4":{"id":"10387f6e-e92a-4ff3-bacc-d27581c38da4","parent":"aaba232e-5da4-480e-ba98-8bcadaf69f84","name":"lambda.js","type":"LAMBDA_FILE","isDirectory":false,"children":[],"isRemovable":true,"filePath":"Project_Anomoly_Detection/lambda.js","code":"let AWS = require('aws-sdk');\nlet sqs = new AWS.SQS();\nlet date = require('date-and-time');\nconst ddb = new AWS.DynamoDB.DocumentClient();\nconst sns = new AWS.SNS();\nexports.handler = function(event, context, callback) {\n\n\tsqs.receiveMessage({\n        QueueUrl: 'https://sqs.us-east-1.amazonaws.com/318300609668/anomalyDetectionQueue',  // URL of your queue\n        AttributeNames: ['All'],\n        MaxNumberOfMessages: '10',\n        VisibilityTimeout: '30',\n        WaitTimeSeconds: '20'\n    }).promise()\n        .then(data => {\n            data.Messages.forEach(message => {      // Going through all the fetched messages in this attempt\n                console.log(\"Received message with payload\", message.Body);\n\n                let messageBody = JSON.parse(message.Body);\n\n                let bookingDateObj = new Date();\n                let startingDateObj = date.parse(messageBody.bookingRequest.startDate, 'YYYY-MM-DD');\n                let endingDateObj = date.parse(messageBody.bookingRequest.endDate, 'YYYY-MM-DD');\n\n                let failure = messageBody.bookingReqProcessingState === \"Failed\";       // Check whether it's a booking failure\n                if (failure) {\n                    let notificationMsg = \"Notifying about booking failure for booking reference :\" + messageBody.bookingRef;\n\n                    sns.publish({                                   // Notifying booking failure via an SMS message using SNS\n                        Message: notificationMsg,\n                        MessageAttributes: {\n                            'AWS.SNS.SMS.SMSType': {\n                                DataType: 'String',\n                                StringValue: 'Promotional'\n                            },\n                            'AWS.SNS.SMS.SenderID': {\n                                DataType: 'String',\n                                StringValue: 'BkFailures'\n                            }\n                        },\n                        PhoneNumber: '+94770630943'                 // Your phone number goes here to get an SMS notification\n                    }).promise()\n                        .then(data => {\n                            console.log(\"Successfully sent notification to the operator with response :\" + JSON.stringify(data));\n                        })\n                        .catch(err => {\n                            console.log(\"Error while sending notification SMS\", err);\n                        });\n                }\n\n                let gapForBookingStartDate = date.subtract(startingDateObj, bookingDateObj).toDays();\n                let gapBetweenBookingDates = date.subtract(endingDateObj, startingDateObj).toDays();\n\n                // Check whether is it a booking anomaly. In this example it's detected as an anomaly if booking start date is\n                // 6 months (180 days) away from the current date or booking date range is greater than 20 days\n                if (gapBetweenBookingDates > 20 || gapForBookingStartDate > 180) {\n                    let insertTimeStr = date.format(new Date(), 'YYYY-MM-DD HH:mm:ss');\n                    ddb.put({\n                        TableName: 'BookingInfoAnomalies',\n                        Item: {\n                            'ResellerID': messageBody.resellerId,\n                            'BookingRef': messageBody.bookingRef,\n                            'BookingState': !failure,\n                            'StartDate': messageBody.bookingRequest.startDate,\n                            'EndDate': messageBody.bookingRequest.endDate,\n                            'Pax': messageBody.bookingRequest.pax,\n                            'City': messageBody.bookingRequest.city,\n                            'Grade': messageBody.bookingRequest.grade,\n                            'InsertTime': insertTimeStr\n                        }\n                    }).promise()\n                        .then(data => {\n                            console.log(\"Successfully inserted booking ref : \" + messageBody.bookingRef +\n                                \" to DynamoDB with response : \" + JSON.stringify(data));\n                        })\n                        .catch(err => {\n                            console.log(\"Error while inserting data to DynamoDB due to : \", err);\n                        });\n                }\n\n                sqs.deleteMessage({                         // Deleting process message to make sure it's not processed again\n                    QueueUrl: 'https://sqs.us-east-1.amazonaws.com/318300609668/anomalyDetectionQueue',  // URL of your queue\n                    ReceiptHandle: message.ReceiptHandle\n\n                }).promise()\n                    .then(data => {\n                        console.log(\"Successfully deleted message with ReceiptHandle : \" + message.ReceiptHandle +\n                            \"and booking reference : \" + messageBody.bookingRef + \" with response :\" + JSON.stringify(data));\n                    })\n                    .catch(err => {\n                        console.log(\"Error while deleting the fetched message with ReceiptHandle : \" + message.ReceiptHandle +\n                            \"and booking reference : \" + messageBody.bookingRef, err);\n                    });\n\n            });\n        })\n        .catch(err => {\n            console.log(\"Error while fetching messages from the sqs queue\", err);\n        });\n\n\n\tcallback(null,'Successfully executed');\n}","triggers":[{"resourceName":"apigusEast1AnomolyDetectiontestany","config":{}}],"config":{"memory":128,"timeout":60,"runtime":"nodejs8.10"},"version":55,"syncVersion":23,"customSecurityPolicy":{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Resource":"arn:aws:sqs:us-east-1:318300609668:anomalyDetectionQueue","Action":["*"]},{"Effect":"Allow","Resource":"arn:aws:sns:us-east-1:3183-0060-9668:","Action":["*"]},{"Effect":"Allow","Resource":"arn:aws:dynamodb:us-east-1:3183-0060-9668:table/UnusualBookingRequests","Action":["*"]}]},"references":[]}},"rootNode":"aaba232e-5da4-480e-ba98-8bcadaf69f84","openFiles":["10387f6e-e92a-4ff3-bacc-d27581c38da4"],"currentFileId":"10387f6e-e92a-4ff3-bacc-d27581c38da4","resources":{"apigusEast1AnomolyDetectiontestany":{"name":"apigusEast1AnomolyDetectiontestany","type":"API_GATEWAY","config":{"selectedRegion":"us-east-1","apiMode":0,"apiName":"Anomoly_Detection","endpointType":"EDGE","resourceMode":0,"resourceName":"test","resourcePath":"/test","restMethod":"ANY","proxyIntegration":false,"enableCORS":false,"stageMode":0,"stageName":"Prod"},"globallyEditable":true},"sqsusEast1test":{"name":"sqsusEast1test","type":"SQS","config":{"mode":0,"existing":false,"name":"test","url":"https://sqs.us-east-1.amazonaws.com/318300609668/test","selectedRegion":"us-east-1","deliveryDelay":0,"deliveryDelayUnit":"seconds","useRedrivePolicy":false,"useSSE":false,"kmsCustomerMasterKey":"default","accountId":"318300609668","dataKeyReusePeriod":5,"queueType":"standardQueue","defaultVisibilityTimeout":30,"defaultVisibilityTimeoutUnit":"seconds","messageRetentionPeriod":4,"messageRetentionPeriodUnit":"days","maximumMessageSize":256,"receiveMessageWaitTime":0,"deadLetterQueueName":"","contentBasedDeduplication":false,"operation":0},"globallyEditable":true}},"envVariables":[{"lambdaId":"all","varKey":"SIGMA_AWS_ACC_ID","varValue":null,"shouldPersist":false,"editable":false}],"packageJSON":{"dependencies":{"aws-sdk":{"name":"aws-sdk","version":"2.176.0","notRemovable":true},"slappforge-sdk-aws":{"name":"slappforge-sdk-aws","version":"0.0.5","notRemovable":false}}},"lambdaId":"10387f6e-e92a-4ff3-bacc-d27581c38da4","additionalFiles":[]},"PROJECT_META":{"projectName":"Project_Anomoly_Detection","projectDescription":"","projectVersion":"1.0.0","projectRegion":"us-east-1","repoName":"Project_Anomoly_Detection","repoUrl":"https://github.com/TestAndunR/Project_Anomoly_Detection","lastSave":1528261492597}}